@use "sass:selector"

//                               := special CSS Selector
// 1.  allows
.alert
  // 1.1 nesting does not happen!!! == replace the outer selector   -- Check the generated .css --
  // Example1: add pseudo-classes to the outer
  &:hover
    font-weight: bold

  // Example2: style the outer selector in a certain context
  [dir=rtl] &             // []   attribute CSS selector        --  right-to-left language --
    margin-left: 0
    margin-right: 10px

  // Example3: argument to pseudo-class selectors
  :not(&)                // NO Nesting!!!
    opacity: 0.8

// 2.in compound selectors, just allowed at the beginning!! --
// not allowed     CSSSelector&
//foo& {
//  color: red;
//}





//                              Uses
// 1.pseudo-class to the outer selector
// Check previous examples
// 2. For adding suffixes --
.accordion
  max-width: 600px
  margin: 4rem auto
  width: 90%
  font-family: "Raleway", sans-serif
  background: #f4f4f4

  &__copy     // extra suffix -- '.accordion__copy' --
    display: none
    padding: 1rem 1.5rem 2rem 1.5rem
    color: gray
    line-height: 1.6
    font-size: 14px
    font-weight: 500

    &--open
      display: block


//                                -- Withing SassScript --
// 1. returns the current parent selector
.main aside:hover,
.sidebar p
  parent-selector: &        //  Used as expression


// 1.1   if it’s used outside any CSS ruleset → null == falsey
@mixin app-background($color)
  #{if(&, '&.app-background', '.app-background')}      //  &     is null here
    background-color: $color
    color: rgba(#fff, 0.75)

.sidebar
  @include app-background(#c6538c)



// 2. + @at-root       ->       powerful nest selectors
@mixin unify-parent($child)        // input passed
  @at-root #{selector.unify(&, $child)}   // TODO: Why do I get an error?
    @content


.wrapper .field
  @include unify-parent("input")
  /* ... */

  @include unify-parent("select")
  /* ... */
