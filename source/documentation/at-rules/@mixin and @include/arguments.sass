@use "sass:meta"
// 1. allows
// 1.1 trailing   ','
@mixin replace-text($image, $x: 50%, $color, $y: 50%,)   // 1.2 $y: 50%     default value
  text-indent: -99999em
  overflow: hidden
  text-align: left

  background:
    image: $image
    repeat: no-repeat
    position: $x $y
    color: $color

// 2. positional arguments
// 2.1 if you rename a mixin’s arguments → it might break       -- uncomment the next mixin
//@mixin replace-text($image)      // overwrite the previous mixin declaration
  background:
    image: $image



// 3. keyword arguments
.mail-icon
  @include replace-text(url("/images/mail.svg"), 0, $color:blue)   // 1.2 $y  is NOT passed, since it's a default value
  //@include replace-text(url("/images/mail.svg"), $color:blue, 0); // 3.1 positional arguments can NOT be passed after keyword arguments


// 4. arbitrary number of arguments
// 4.1 for @mixin
@mixin order($height, $selectors...)          // $selectors...      is the argument list
  @for $i from 0 to length($selectors)
    #{nth($selectors, $i + 1)}
      position: absolute
      height: $height
      margin-top: $i * $height
@include order(150px, "input.name", "input.address", "input.zip")

// 4.2 for @include
$form-selectors: "input.name", "input.address", "input.zip" !default
@include order(150px, $form-selectors...)     // $form-selectors...     === additional positional arguments

// 4.3 arbitrary keyword arguments
@mixin syntax-colors($args...)
  @debug meta.keywords($args)                 // meta.keywords($args)     returns a map of keyword arguments
  // (string: #080, comment: #800, variable: #60b)    // expected map returned
  @each $name, $color in meta.keywords($args)
    pre span.stx-#{$name}
      color: $color

@include syntax-colors($string: #080, $comment: #800, $variable: #60b)
